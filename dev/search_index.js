var documenterSearchIndex = {"docs":
[{"location":"#EpicHyperSketch","page":"Home","title":"EpicHyperSketch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EpicHyperSketch.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#EpicHyperSketch.CountMinSketch","page":"Home","title":"EpicHyperSketch.CountMinSketch","text":"CountMinSketch(motif_size::Integer; delta, epsilon, use_cuda)\n\nCreate a CountMinSketch object.\n\nmotif_size: Number of features (motifs).\ndelta: Error probability.\nepsilon: Error tolerance.\nuse_cuda: If true, use CUDA arrays.\n\n\n\n\n\n","category":"type"},{"location":"#EpicHyperSketch.Record","page":"Home","title":"EpicHyperSketch.Record","text":"- vecRefArray::Vector{AbstractArray{IntType, 3}}\nReference arrays on the selected features for each data point\n\n- combs::AbstractArray{IntType, 2}\nCombinations, store each combination horizontally. For example, \nthis can be generated by \n```julia\nusing Combinatorics\ncombinations(1:5, 3) |> collect |> hcat\n````\n\n\n\n\n\n","category":"type"},{"location":"#Base.getindex-Tuple{CountMinSketch, Int64, Int64}","page":"Home","title":"Base.getindex","text":"getindex(cms::CountMinSketch, i, j)\n\nAccess the sketch matrix at position (i, j).\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, CountMinSketch}","page":"Home","title":"Base.show","text":"show(io::IO, cms::CountMinSketch)\n\nCustom pretty printing for CountMinSketch objects.\n\n\n\n\n\n","category":"method"},{"location":"#Base.size-Tuple{CountMinSketch}","page":"Home","title":"Base.size","text":"size(cms::CountMinSketch)\n\nReturn the size of the sketch matrix.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.batch_count_and_last_size-Union{Tuple{Dict{T, Vector{S}}}, Tuple{S}, Tuple{T}, Tuple{Dict{T, Vector{S}}, Integer}} where {T<:Integer, S}","page":"Home","title":"EpicHyperSketch.batch_count_and_last_size","text":"batch_count_and_last_size(dict, batch_size)\n\nReturn the number of batches needed and the size of the last batch.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.calculate_conv_hash-NTuple{8, Any}","page":"Home","title":"EpicHyperSketch.calculate_conv_hash","text":"Calculate hash index for convolution method, including position distances. Returns -1 if filters overlap (invalid combination).\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.calculate_ordinary_hash-NTuple{7, Any}","page":"Home","title":"EpicHyperSketch.calculate_ordinary_hash","text":"Calculate hash index for ordinary (non-convolution) counting method.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.cms_cols-Tuple{Int64, Int64}","page":"Home","title":"EpicHyperSketch.cms_cols","text":"cms_cols(num_counters, rows)\n\nCalculate the number of columns in the sketch given num_counters and rows.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.cms_num_counters-Tuple{Int64, Float64}","page":"Home","title":"EpicHyperSketch.cms_num_counters","text":"cms_num_counters(rows, epsilon)\n\nCalculate the total number of counters in the sketch given rows and error tolerance epsilon.\n\nNote: The counters simply means the total number of cells in the sketch matrix.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.cms_rows-Tuple{Float64}","page":"Home","title":"EpicHyperSketch.cms_rows","text":"cms_rows(delta)\n\nCalculate the number of rows in the Count-Min Sketch given the error probability delta.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.config_size-Tuple{Record}","page":"Home","title":"EpicHyperSketch.config_size","text":"config_size(r::Record)\n\nFor :OrdinaryFeatures: Returns motif_size (one coefficient per feature position). For :Convolution: Returns 2 * motif_size - 1 (coefficients for both features and distances).\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.constructVecRefArrays-Union{Tuple{S}, Tuple{T}, Tuple{Dict{T, Vector{S}}, Integer}} where {T<:Integer, S}","page":"Home","title":"EpicHyperSketch.constructVecRefArrays","text":"constructVecRefArrays(activation_dict, max_active_len; batch_size, case, use_cuda)\n\nConstructs batched reference arrays for each data point, storing features or convolution info in a 3D array.      Optionally moves arrays to GPU if use_cuda is true.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.count_kernel_conv-NTuple{5, Any}","page":"Home","title":"EpicHyperSketch.count_kernel_conv","text":"CUDA kernel for convolution-based counting with position-aware hashing. Works with filter/feature combinations, skips when filters overlap.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.count_kernel_conv_get_candidates-NTuple{7, Any}","page":"Home","title":"EpicHyperSketch.count_kernel_conv_get_candidates","text":"CUDA kernel for convolution-based candidate selection with position-aware hashing. Identifies combinations that meet minimum count threshold and marks them in selectedCombs.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.count_kernel_ordinary-NTuple{4, Any}","page":"Home","title":"EpicHyperSketch.count_kernel_ordinary","text":"CUDA kernel for ordinary counting of filter/feature combinations without position constraints.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.count_kernel_ordinary_get_candidate-NTuple{6, Any}","page":"Home","title":"EpicHyperSketch.count_kernel_ordinary_get_candidate","text":"CUDA kernel for ordinary candidate selection without position constraints. Identifies combinations that meet minimum count threshold and marks them in selectedCombs.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.filter_empty!-Union{Tuple{Dict{T, Vector{S}}}, Tuple{S}, Tuple{T}} where {T<:Integer, S}","page":"Home","title":"EpicHyperSketch.filter_empty!","text":"filter_empty!(dict)\n\nFilter out keys with empty values from the dictionary.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.generate_combinations-Tuple{Integer, Integer}","page":"Home","title":"EpicHyperSketch.generate_combinations","text":"generate_combinations(motif_size, max_active_len; use_cuda=true)\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.get_max_active_len-Union{Tuple{Dict{T, Vector{S}}}, Tuple{S}, Tuple{T}} where {T<:Integer, S}","page":"Home","title":"EpicHyperSketch.get_max_active_len","text":"get_max_active_len(dict)\n\nReturn the maximum length among all vectors in the dictionary.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.is_combination_valid-NTuple{4, Any}","page":"Home","title":"EpicHyperSketch.is_combination_valid","text":"Check if all filters/features in a combination are present (non-zero) in refArray.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.num_hash_columns-Tuple{Integer, Symbol}","page":"Home","title":"EpicHyperSketch.num_hash_columns","text":"num_hash_columns(motif_size, case)\n\nReturn the number of hash columns for the given motif size and case.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.obtain_configs_conv!-NTuple{5, Any}","page":"Home","title":"EpicHyperSketch.obtain_configs_conv!","text":"Extract configurations for convolution case: filter IDs and inter-filter distances.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.obtain_configs_ordinary!-NTuple{4, Any}","page":"Home","title":"EpicHyperSketch.obtain_configs_ordinary!","text":"Extract configurations for ordinary case: only filter/feature IDs.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.sort_activation_dict!-Union{Tuple{Dict{T, Vector{S}}}, Tuple{S}, Tuple{T}} where {T<:Integer, S}","page":"Home","title":"EpicHyperSketch.sort_activation_dict!","text":"sort_activation_dict!(activation_dict; case=:OrdinaryFeatures)\n\nSorts each vector in the activation dictionary in-place. For :Convolution, sorts by position field.\n\n\n\n\n\n","category":"method"}]
}
