var documenterSearchIndex = {"docs":
[{"location":"#EpicHyperSketch","page":"Home","title":"EpicHyperSketch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EpicHyperSketch.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#EpicHyperSketch.CountMinSketch","page":"Home","title":"EpicHyperSketch.CountMinSketch","text":"CountMinSketch(motif_size::Integer; delta, epsilon, use_cuda, seed)\n\nCreate a CountMinSketch object.\n\nmotif_size: Number of features (motifs).\ndelta: Error probability.\nepsilon: Error tolerance.\nuse_cuda: If true, use CUDA arrays.\nseed: Random seed for reproducibility (optional).\n\n\n\n\n\n","category":"type"},{"location":"#EpicHyperSketch.HyperSketchConfig","page":"Home","title":"EpicHyperSketch.HyperSketchConfig","text":"Configuration parameters for EpicHyperSketch operations.\n\n\n\n\n\n","category":"type"},{"location":"#EpicHyperSketch.HyperSketchError","page":"Home","title":"EpicHyperSketch.HyperSketchError","text":"Custom exceptions for EpicHyperSketch.\n\n\n\n\n\n","category":"type"},{"location":"#EpicHyperSketch.Record","page":"Home","title":"EpicHyperSketch.Record","text":"- vecRefArray::Vector{AbstractArray{IntType, 3}}\nReference arrays on the selected features for each data point\n\n- combs::AbstractArray{IntType, 2}\nCombinations, store each combination horizontally. For example, \nthis can be generated by \n```julia\nusing Combinatorics\ncombinations(1:5, 3) |> collect |> hcat\n````\n\n\n\n\n\n","category":"type"},{"location":"#Base.getindex-Tuple{CountMinSketch, Int64, Int64}","page":"Home","title":"Base.getindex","text":"getindex(cms::CountMinSketch, i, j)\n\nAccess the sketch matrix at position (i, j).\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, CountMinSketch}","page":"Home","title":"Base.show","text":"show(io::IO, cms::CountMinSketch)\n\nCustom pretty printing for CountMinSketch objects.\n\n\n\n\n\n","category":"method"},{"location":"#Base.size-Tuple{CountMinSketch}","page":"Home","title":"Base.size","text":"size(cms::CountMinSketch)\n\nReturn the size of the sketch matrix.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch._obtain_enriched_configurations_cpu_-Tuple{Record, HyperSketchConfig}","page":"Home","title":"EpicHyperSketch._obtain_enriched_configurations_cpu_","text":"CPU version: Extract configurations where combinations exceed minimum count threshold. Returns a DataFrame with the same structure as the GPU version.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.batch_count_and_last_size-Union{Tuple{Dict{T, Vector{S}}}, Tuple{S}, Tuple{T}, Tuple{Dict{T, Vector{S}}, Integer}} where {T<:Integer, S}","page":"Home","title":"EpicHyperSketch.batch_count_and_last_size","text":"batch_count_and_last_size(dict, batch_size)\n\nReturn the number of batches needed and the size of the last batch.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.calculate_conv_hash-NTuple{8, Any}","page":"Home","title":"EpicHyperSketch.calculate_conv_hash","text":"Calculate hash index for convolution method, including position distances. Returns -1 if filters overlap (invalid combination).\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.calculate_conv_hash_cpu-NTuple{8, Any}","page":"Home","title":"EpicHyperSketch.calculate_conv_hash_cpu","text":"CPU version: Calculate hash index for convolution method, including position distances. Returns -1 if filters overlap (invalid combination).\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.calculate_ordinary_hash-NTuple{7, Any}","page":"Home","title":"EpicHyperSketch.calculate_ordinary_hash","text":"Calculate hash index for ordinary (non-convolution) counting method.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.calculate_ordinary_hash_cpu-NTuple{7, Any}","page":"Home","title":"EpicHyperSketch.calculate_ordinary_hash_cpu","text":"CPU version: Calculate hash index for ordinary (non-convolution) counting method.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.check_cuda_requirements-Tuple{Bool}","page":"Home","title":"EpicHyperSketch.check_cuda_requirements","text":"Check CUDA availability and requirements.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.cms_cols-Tuple{Int64, Int64}","page":"Home","title":"EpicHyperSketch.cms_cols","text":"cms_cols(num_counters, rows)\n\nCalculate the number of columns in the sketch given num_counters and rows.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.cms_num_counters-Tuple{Int64, Float64}","page":"Home","title":"EpicHyperSketch.cms_num_counters","text":"cms_num_counters(rows, epsilon)\n\nCalculate the total number of counters in the sketch given rows and error tolerance epsilon.\n\nNote: The counters simply means the total number of cells in the sketch matrix.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.cms_rows-Tuple{Float64}","page":"Home","title":"EpicHyperSketch.cms_rows","text":"cms_rows(delta)\n\nCalculate the number of rows in the Count-Min Sketch given the error probability delta.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.constructVecRefArrays-Union{Tuple{S}, Tuple{T}, Tuple{Dict{T, Vector{S}}, Integer}} where {T<:Integer, S}","page":"Home","title":"EpicHyperSketch.constructVecRefArrays","text":"constructVecRefArrays(activation_dict, max_active_len; batch_size, case, use_cuda)\n\nConstructs batched reference arrays for each data point, storing features or convolution info in a 3D array.      Optionally moves arrays to GPU if use_cuda is true.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.count_conv_cpu!-Tuple{Record, HyperSketchConfig}","page":"Home","title":"EpicHyperSketch.count_conv_cpu!","text":"CPU version: Execute counting on the sketch for convolution case.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.count_cpu!-Tuple{Record, HyperSketchConfig}","page":"Home","title":"EpicHyperSketch.count_cpu!","text":"CPU version: Main counting function dispatcher.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.count_kernel_conv-NTuple{5, Any}","page":"Home","title":"EpicHyperSketch.count_kernel_conv","text":"CUDA kernel for convolution-based counting with position-aware hashing. Works with filter/feature combinations, skips when filters overlap.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.count_kernel_conv_get_candidates-NTuple{7, Any}","page":"Home","title":"EpicHyperSketch.count_kernel_conv_get_candidates","text":"CUDA kernel for convolution-based candidate selection with position-aware hashing. Computes minimum across all hash functions for proper Count-Min Sketch behavior.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.count_kernel_ordinary-NTuple{4, Any}","page":"Home","title":"EpicHyperSketch.count_kernel_ordinary","text":"CUDA kernel for ordinary counting of filter/feature combinations without position constraints.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.count_kernel_ordinary_get_candidate-NTuple{6, Any}","page":"Home","title":"EpicHyperSketch.count_kernel_ordinary_get_candidate","text":"CUDA kernel for ordinary candidate selection without position constraints. Computes minimum across all hash functions for proper Count-Min Sketch behavior.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.count_ordinary_cpu!-Tuple{Record, HyperSketchConfig}","page":"Home","title":"EpicHyperSketch.count_ordinary_cpu!","text":"CPU version: Execute counting on the sketch for ordinary case.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.default_config-Tuple{}","page":"Home","title":"EpicHyperSketch.default_config","text":"Get default configuration with optional overrides.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.generate_combinations-Tuple{Integer, Integer}","page":"Home","title":"EpicHyperSketch.generate_combinations","text":"generate_combinations(motif_size, max_active_len; use_cuda=true)\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.get_max_active_len-Union{Tuple{Dict{T, Vector{S}}}, Tuple{S}, Tuple{T}} where {T<:Integer, S}","page":"Home","title":"EpicHyperSketch.get_max_active_len","text":"get_max_active_len(dict)\n\nReturn the maximum length among all vectors in the dictionary.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.is_combination_valid-NTuple{4, Any}","page":"Home","title":"EpicHyperSketch.is_combination_valid","text":"Check if all filters/features in a combination are present (non-zero) in refArray.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.is_combination_valid_cpu-NTuple{4, Any}","page":"Home","title":"EpicHyperSketch.is_combination_valid_cpu","text":"CPU version: Check if all filters/features in a combination are present (non-zero) in refArray.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.make_selection_conv_cpu!-Tuple{Record, HyperSketchConfig}","page":"Home","title":"EpicHyperSketch.make_selection_conv_cpu!","text":"CPU version: Identify combinations that meet minimum count threshold for convolution case.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.make_selection_cpu!-Tuple{Record, HyperSketchConfig}","page":"Home","title":"EpicHyperSketch.make_selection_cpu!","text":"CPU version: Main selection function dispatcher.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.make_selection_ordinary_cpu!-Tuple{Record, HyperSketchConfig}","page":"Home","title":"EpicHyperSketch.make_selection_ordinary_cpu!","text":"CPU version: Identify combinations that meet minimum count threshold for ordinary case.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.memory_info-Tuple{}","page":"Home","title":"EpicHyperSketch.memory_info","text":"Memory usage monitoring for CUDA operations.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.num_hash_columns-Tuple{Integer, Symbol}","page":"Home","title":"EpicHyperSketch.num_hash_columns","text":"num_hash_columns(motif_size, case)\n\nReturn the number of hash columns for the given motif size and case.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.obtain_enriched_configurations_cpu-Tuple{Dict{T, Vector{S}} where {T<:Integer, S}}","page":"Home","title":"EpicHyperSketch.obtain_enriched_configurations_cpu","text":"CPU version: Main function to obtain enriched configurations.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.obtain_motifs_conv!-NTuple{11, Any}","page":"Home","title":"EpicHyperSketch.obtain_motifs_conv!","text":"Extract configurations for convolution case: filter IDs and inter-filter distances.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.obtain_motifs_conv_cpu!-NTuple{11, Any}","page":"Home","title":"EpicHyperSketch.obtain_motifs_conv_cpu!","text":"CPU version: Extract configurations for convolution case - filter IDs, distances, positions, dataindex, contributions. Returns matrices: motifs, distances, positions, dataindex, contribs.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.obtain_motifs_ordinary!-NTuple{8, Any}","page":"Home","title":"EpicHyperSketch.obtain_motifs_ordinary!","text":"Extract configurations for ordinary case: only filter/feature IDs.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.obtain_motifs_ordinary_cpu!-NTuple{8, Any}","page":"Home","title":"EpicHyperSketch.obtain_motifs_ordinary_cpu!","text":"CPU version: Extract configurations for ordinary case - feature IDs, dataindex, contributions. Returns matrices: motifs, dataindex, contribs.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.optimize_kernel_params-Tuple{Integer, Tuple}","page":"Home","title":"EpicHyperSketch.optimize_kernel_params","text":"Optimize CUDA kernel launch parameters based on device capabilities.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.sort_activation_dict!-Union{Tuple{Dict{T, Vector{S}}}, Tuple{S}, Tuple{T}} where {T<:Integer, S}","page":"Home","title":"EpicHyperSketch.sort_activation_dict!","text":"sort_activation_dict!(activation_dict; case=:OrdinaryFeatures)\n\nSorts each vector in the activation dictionary in-place. For :Convolution, sorts by position field.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.validate_activation_dict-Tuple{Dict{T, Vector{S}} where {T<:Integer, S}}","page":"Home","title":"EpicHyperSketch.validate_activation_dict","text":"Validate activation dictionary structure.\n\n\n\n\n\n","category":"method"},{"location":"#EpicHyperSketch.@gpu_time-Tuple{Any}","page":"Home","title":"EpicHyperSketch.@gpu_time","text":"Macro for timing GPU operations with proper synchronization.\n\n\n\n\n\n","category":"macro"},{"location":"#EpicHyperSketch.@validate-Tuple{Any, Any}","page":"Home","title":"EpicHyperSketch.@validate","text":"Macro for parameter validation with clear error messages.\n\n\n\n\n\n","category":"macro"}]
}
