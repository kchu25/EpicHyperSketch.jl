"""
    - vecRefArray::Vector{AbstractArray{IntType, 3}}
    Reference arrays on the selected features for each data point

    - combs::AbstractArray{IntType, 2}
    Combinations, store each combination horizontally. For example, 
    this can be generated by 
    ```julia
    using Combinatorics
    combinations(1:5, 3) |> collect |> hcat
    ````
"""
mutable struct record
    # Reference arrays on the selected features for each data point
    vecRefArray::Vector{AbstractArray{IntType, 3}}
    # combinations, store each combination horizontally
    combs::AbstractArray{IntType, 2}
    # count-min sketch
    cms::CountMinSketch
    # selected combinations
    selected_combs::Vector{AbstractArray{Bool, 2}}
    # case: :OrdinaryFeatures or :Convolution
    case::Symbol
    # size of the motif (number of features/filters per motif)
    motif_size::Integer
    # filter length (for convolution case)
    filter_len::Union{Integer, Nothing}

    function record(activation_dict::Dict{T, Vector{S}}, 
        motif_size::Integer,
        batch_size=BATCH_SIZE
        ) where {T <: Integer, S}
        
        filter_empty!(activation_dict)
        case = dict_case(activation_dict)
        max_active_len = get_max_active_len(activation_dict)

    end
end

function constructRefArrays(; batch_size=BATCH_SIZE)
end


num_batches(r::record) = length(r.vecRefArray)

const OrdinaryFeatureType = Int
const ConvolutionFeatureType = NamedTuple{(:filter, :position), Tuple{Int, Int}}

function dict_case(dict::Dict{T, Vector{S}}) where {T <: Integer, S}
    if S == OrdinaryFeatureType
        return :OrdinaryFeatures
    elseif S == ConvolutionFeatureType
        return :Convolution
    else
        error("Unsupported element type in dictionary values")
    end
end

"""
    filter_empty!(dict)
Filter out keys with empty values from the dictionary.
"""
function filter_empty!(dict::Dict{T, Vector{S}}) where {T <: Integer, S}
    filter!((k, v) -> !isempty(v), dict)
end

"""
    get_max_active_len(dict)
Return the maximum length among all vectors in the dictionary.
"""
function get_max_active_len(dict::Dict{T, Vector{S}}) where {T <: Integer, S}
    maximum(length, values(dict))
end