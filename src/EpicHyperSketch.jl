module EpicHyperSketch

using CUDA
using Combinatorics
#

const IntType = Int32 # RTX 3090 has dedicated INT32 execution units in each SM 
const PrimeNumber = IntType(50000101)  # Using more descriptive variable name
# Default error probability (delta) for Count-Min Sketch.
const DEFAULT_CMS_DELTA = 0.0001  # All uppercase to follow Julia convention
# Default error tolerance (epsilon) for Count-Min Sketch.
const DEFAULT_CMS_EPSILON = 0.00005  # Renamed and in all uppercase

include("sketch.jl")







"""
    - vecRefArray::Vector{AbstractArray{IntType, 3}}
    Reference arrays on the selected features for each data point

    - combs::AbstractArray{IntType, 2}
    Combinations, store each combination horizontally. For example, 
    this can be generated by 
    ```julia
    using Combinatorics
    combinations(1:5, 3) |> collect |> hcat
    ````
"""
mutable struct record
    # Reference arrays on the selected features for each data point
    vecRefArray::Vector{AbstractArray{IntType, 3}}
    # combinations, store each combination horizontally
    combs::AbstractArray{IntType, 2}
end


function obtain_enriched_configurations(
    selected_features;
    min_count::IntType=1,
    delta::Float64=DEFAULT_CMS_DELTA,
    epsilon::Float64=DEFAULT_CMS_EPSILON
)
    @assert min_count > 0 "min_count must be greater than 0"
    @assert 0 < delta < 1 "delta must be in (0, 1)"
    @assert 0 < epsilon < 1 "epsilon must be in (0, 1)"


    # make record
    # do the counting
    # fill in the candidates that meet the min_count threshold
    # get the enriched configurations

end


export CountMinSketch

end
